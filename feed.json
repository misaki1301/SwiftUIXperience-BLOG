{"version":"https://jsonfeed.org/version/1","title":"MisakiDEV","home_page_url":"http://localhost/","feed_url":"http://localhost/feed.json","description":"General description of the blog","items":[{"id":"http://localhost/posts/swift-intro-part-1/","url":"http://localhost/posts/swift-intro-part-1/","title":"An story of how Apple change the way we code for iOS","content_html":"<p><img src=\"http://localhost/uploads/pexels-nickoloui-2473183(1).jpg\" alt=\"Image\"><br>\n<em>Photo by Nikolaos Dimou: <a href=\"https://www.pexels.com/photo/black-macbook-pro-2473183/\">source</a></em></p>\n<p>Around 2019, Apple introduces SwiftUI, a new way to code for Apple devices, making it so easy and fast to build interfaces without compromising the effort learning about constraints and the interface builder used for UIKit.</p>\n<!--more-->\n<p>What kind of changes, you tell?</p>\n<p>Well, in SwiftUI taking example of the button, now you can code it and see a preview of it in mere seconds</p>\n<p>Example:</p>\n<pre><code class=\"language-swift\">struct ExampleView: View {\n    var body: some View {\n        VStack {\n            Button(&quot;Submit SwiftUI&quot;, action: {}})\n        }\n        .padding()\n    }\n}\n</code></pre>\n<p>and the preview looks like this:\n<img src=\"http://localhost/uploads/screenshot-2024-09-12-at-6.40.26-pm.png\" alt=\"Image\"></p>\n<p>in the UIKit side:\n<img src=\"http://localhost/uploads/screenshot-2024-09-12-at-6.57.23-pm.png\" alt=\"Image\"></p>\n<p>The ViewController will look like this:</p>\n<div class=\"markdown-alert markdown-alert-tip\">\n<p class=\"markdown-alert-title\">Tip</p>\n<p>Don't forget to add the reference of the button of the storyboard\nIt won't work without it</p>\n</div>\n<pre><code class=\"language-swift\">import UIKit\n\nclass HelloViewController: UIViewController {\n\n    @IBOutlet weak var submitButton: UIButton!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Do any additional setup after loading the view.\n        submitButton.addTarget(\n        self, \n        action: #selector(submitHelloWorld), \n        for: .touchUpInside\n        )\n    }\n    \n    @objc func submitHelloWorld() {\n        print(&quot;Hello World!&quot;)\n    }\n    \n}\n</code></pre>\n<p>Classic implementation and kinda messy if we make some updates to the reference...</p>\n<p>what about the SwiftUI one?</p>\n<p>Well, if you looked carefully at the code with SwiftUI, the component Button has a parameter called action, so we can pass a function there :)</p>\n<pre><code class=\"language-swift\">struct ExampleView: View {\n    var body: some View {\n        VStack {\n            Button(&quot;Submit SwiftUI&quot;, action: submit)\n        }\n        .padding()\n    }\n    \n    private func submit() {\n        print(&quot;Hello World!&quot;)\n    }\n}\n</code></pre>\n<p>OK</p>\n","date_published":"Wed, 04 Sep 2024 00:00:00 GMT"}]}